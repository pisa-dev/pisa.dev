// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Example {
    id String @id @default(cuid())
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String? @db.Text
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    admin         Boolean         @default(false)
    image         String?
    accounts      Account[]
    sessions      Session[]
    proposals     EventProposal[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model EventProposal {
    id           String  @id @default(cuid())
    title        String
    description  String
    duration     String
    creatorEmail String
    creator      User    @relation(fields: [creatorEmail], references: [email], onDelete: NoAction)
    eventbriteId String?
}

model Survey {
    id        String           @id @default(cuid())
    title     String
    questions SurveyQuestion[]
}

enum SurveyQuestionKind {
    stars
    textbox
    singlechoice
    multiplechoices
}

model SurveyQuestion {
    id       String             @id @default(cuid())
    order    Int                @default(0)
    surveyId String
    survey   Survey             @relation(fields: [surveyId], references: [id], onDelete: Cascade)
    question String
    details  String?
    required Boolean            @default(false)
    kind     SurveyQuestionKind
    data     Json
    answers  SurveyAnswer[]

    @@index([surveyId])
}

model SurveyAnswer {
    id         String         @id @default(cuid())
    questionId String
    question   SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answer     String

    @@index([questionId])
}
